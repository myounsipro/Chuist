// Chemin de base configurable (à définir dans vos propriétés)
private static final String BATCH_HOME = "/home/batch";
private static final String INVOICES_DIR = "INVOICES";

public Path saveWorkbookToBatch(Workbook workbook, String fileName) throws IOException {
    // Création du répertoire s'il n'existe pas
    Path batchDir = Path.of(BATCH_HOME, INVOICES_DIR);
    Files.createDirectories(batchDir);

    // Chemin complet du fichier
    Path filePath = batchDir.resolve(fileName);

    try (OutputStream os = Files.newOutputStream(filePath)) {
        workbook.write(os);
    }

    LOG.info("Workbook saved to batch directory: {}", filePath);
    return filePath;
}

private String uploadFileToS3(Path filePath, String keyNamePrefix) throws SdkBaseException {
    // Vérification que le fichier existe
    if (!Files.exists(filePath)) {
        throw new IOException("File not found: " + filePath);
    }

    String s3Key = String.format("%s/%s/%s", 
        INVOICES_DIR, 
        keyNamePrefix, 
        filePath.getFileName());

    // Upload vers S3 (décommentez votre implémentation réelle)
    // s3Client.putObject(BUCKET_NAME, s3Key, filePath.toFile());
    
    LOG.info("File uploaded to S3 with key: {}", s3Key);
    return s3Key;
}

// Méthode d'intégration
public String processInvoice(InvoiceInfo invoiceInfo) throws Exception {
    Workbook workbook = createWorkbook(invoiceInfo);
    String fileName = "invoice_" + System.currentTimeMillis() + ".xlsx";
    
    // 1. Sauvegarde locale
    Path localPath = saveWorkbookToBatch(workbook, fileName);
    
    // 2. Upload S3
    return uploadFileToS3(localPath, invoiceInfo.getClientId());
}