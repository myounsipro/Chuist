import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.apache.poi.ss.usermodel.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.List;

class ExcelUtilityTest {

    private Sheet mockSheet;
    private Row mockRow;
    private Cell mockCell;
    private Part3Data mockData;
    private PartStyle mockStyle;
    private InvoiceLine mockLine;

    @BeforeEach
    void setUp() {
        mockSheet = mock(Sheet.class);
        mockRow = mock(Row.class);
        mockCell = mock(Cell.class);
        mockStyle = mock(PartStyle.class);
        mockData = mock(Part3Data.class);
        mockLine = mock(InvoiceLine.class);

        when(mockSheet.createRow(anyInt())).thenReturn(mockRow);
        when(mockRow.createCell(anyInt())).thenReturn(mockCell);
        when(mockStyle.getStyleLabelCell()).thenReturn(mock(CellStyle.class));
        when(mockData.getInvoiceLines()).thenReturn(List.of(mockLine));

        when(mockLine.getConventionPolicy()).thenReturn("POLICY1");
        // simuler d'autres getters si n√©cessaire
    }

    @Test
    void testCreatePartLines() {
        ExcelUtility.createPartLines(mockSheet, mockData, mockStyle, 0, 10);

        verify(mockSheet).createRow(0);
        verify(mockRow, atLeastOnce()).createCell(anyInt());
        verify(mockCell, atLeastOnce()).setCellStyle(any());
        verify(mockCell, atLeastOnce()).setCellValue(anyString());
    }
}