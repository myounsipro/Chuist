package com.bnpp.pf.octa.application.service;

import com.bnpp.pf.octa.application.dto.RestInvoiceFile;
import com.bnpp.pf.octa.domain.invoice.repository.InvoiceFileRepository;
import com.bnpp.pf.octa.domain.paginated.PaginationRequest;
import com.bnpp.pf.octa.domain.paginated.PaginatedResult;
import com.bnpp.pf.octa.domain.service.InvoiceFileReaderWriter;
import com.bnpp.pf.octa.infrastructure.cache.InvoiceFilterCache;
import com.bnpp.pf.octa.infrastructure.cache.InvoiceFilter;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class InvoiceFileApplicationServiceTest {

    private InvoiceFileRepository invoiceFileRepository;
    private InvoiceFilterCache invoiceFilterCache;
    private InvoiceFileApplicationService service;

    @BeforeEach
    void setUp() {
        invoiceFileRepository = mock(InvoiceFileRepository.class);
        invoiceFilterCache = mock(InvoiceFilterCache.class);
        service = new InvoiceFileApplicationService(invoiceFileRepository, invoiceFilterCache);
    }

    @Test
    void testGetAllInvoice() {
        List<String> rawInvoices = List.of("invoice1", "invoice2");

        // Simuler l'acc√®s aux fichiers
        InvoiceFileReaderWriter readerWriter = mock(InvoiceFileReaderWriter.class);
        when(invoiceFileRepository.getAll()).thenReturn(rawInvoices);

        List<RestInvoiceFile> result = service.getAllInvoice();
        assertNotNull(result);
    }

    @Test
    void testGetInvoiceFileById_found() {
        Long id = 1L;
        String rawInvoice = "invoice1";
        when(invoiceFileRepository.getInvoiceFileById(id)).thenReturn(Optional.of(rawInvoice));

        RestInvoiceFile result = service.getInvoiceFileById(id);
        assertNotNull(result);
    }

    @Test
    void testGetInvoiceFileById_notFound() {
        Long id = 999L;
        when(invoiceFileRepository.getInvoiceFileById(id)).thenReturn(Optional.empty());

        RestInvoiceFile result = service.getInvoiceFileById(id);
        assertNull(result);
    }

    @Test
    void testGetInvoiceFileByIds() {
        List<Long> ids = List.of(1L, 2L);
        List<String> rawInvoices = List.of("inv1", "inv2");

        when(invoiceFileRepository.getInvoiceFileByIds(ids)).thenReturn(rawInvoices);

        Map<Long, RestInvoiceFile> result = service.getInvoiceFileByIds(ids);
        assertEquals(2, result.size());
    }

    @Test
    void testGetInvoiceByInvoiceNumber() {
        String invoiceNumber = "INV-123";
        List<String> rawInvoices = List.of("invoice");

        when(invoiceFileRepository.getByInvoiceNumber(invoiceNumber)).thenReturn(rawInvoices);

        List<RestInvoiceFile> result = service.getByInvoiceNumber(invoiceNumber);
        assertEquals(1, result.size());
    }

    @Test
    void testGetFilters() {
        InvoiceFilter filter = mock(InvoiceFilter.class);
        when(invoiceFilterCache.getFilters()).thenReturn(filter);

        InvoiceFilter result = service.getFilters();
        assertEquals(filter, result);
    }

    // Tu peux ajouter un test pour getLatestInvoiceFiles si tu veux aussi couvrir la pagination.
}
