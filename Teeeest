;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.oauth2.jwt.Jwt;
import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationToken;
import org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter;

import java.util.List;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class JwtAuthenticationConverterTest {

    private JwtAuthenticationConverter converter;

    @BeforeEach
    void setUp() {
        converter = new JwtAuthenticationConverter();
    }

    @Test
    void convert_shouldReturnAuthenticationTokenWithAuthorities() {
        // Given
        Jwt jwt = mock(Jwt.class);
        JwtGrantedAuthoritiesConverter springConverter = mock(JwtGrantedAuthoritiesConverter.class);
        when(springConverter.convert(jwt)).thenReturn(List.of());

        List<String> extractedRoles = List.of("ROLE_USER", "ROLE_ADMIN");

        try (MockedStatic<AuthenticatedUser> mockStatic = mockStatic(AuthenticatedUser.class)) {
            mockStatic.when(() -> AuthenticatedUser.extractRolesFromToken(jwt))
                      .thenReturn(extractedRoles);

            // When
            JwtAuthenticationToken result = (JwtAuthenticationToken) converter.convert(jwt);

            // Then
            assertNotNull(result);
            assertEquals(jwt, result.getPrincipal());
            Set<String> authorityNames = result.getAuthorities().stream()
                                               .map(GrantedAuthority::getAuthority)
                                               .collect(java.util.stream.Collectors.toSet());

            assertTrue(authorityNames.contains("ROLE_USER"));
            assertTrue(authorityNames.contains("ROLE_ADMIN"));
        }
    }

    @Test
    void convert_shouldHandleEmptyRoles() {
        Jwt jwt = mock(Jwt.class);

        try (MockedStatic<AuthenticatedUser> mockStatic = mockStatic(AuthenticatedUser.class)) {
            mockStatic.when(() -> AuthenticatedUser.extractRolesFromToken(jwt))
                      .thenReturn(List.of());

            JwtAuthenticationToken result = (JwtAuthenticationToken) converter.convert(jwt);

            assertNotNull(result);
            assertTrue(result.getAuthorities().isEmpty());
        }
    }
}