// Mettez à jour votre interface/modèle pour les alertes
interface Alert {
  id: number;
  category: string;  // "États-Unis", "Tours généralement", etc.
  type: string;      // "Échec", "Factures générées", "Méthode Facteur"
  severity: 'warning' | 'error' | 'info';
  timestamp?: Date;
}

@Component({...})
export class DashboardComponent {
  // Mettez à jour vos données d'alertes
  alerts: Alert[] = [
    { 
      id: 1, 
      category: 'États-Unis', 
      type: 'Échec', 
      severity: 'error',
      timestamp: new Date('2025-05-14T10:15:00')
    },
    { 
      id: 2, 
      category: 'États-Unis', 
      type: 'Factures générées', 
      severity: 'info' 
    },
    { 
      id: 3, 
      category: 'États-Unis', 
      type: 'Méthode Facteur', 
      severity: 'warning' 
    },
    { 
      id: 4, 
      category: 'Tours généralement', 
      type: 'Tourisme générique', 
      severity: 'info' 
    },
    { 
      id: 5, 
      category: 'Tours généralement', 
      type: 'Échec', 
      severity: 'error' 
    },
    // ... autres alertes
  ];

  // Fonction pour grouper les alertes par catégorie
  getAlertsByCategory() {
    return this.alerts.reduce((acc, alert) => {
      if (!acc[alert.category]) {
        acc[alert.category] = [];
      }
      acc[alert.category].push(alert);
      return acc;
    }, {} as Record<string, Alert[]>);
  }
}







<mat-card class="dashboard-card">
  <mat-card-header>
    <mat-card-title>Alertes</mat-card-title>
    <span class="badge">{{ alerts.length }}</span>
  </mat-card-header>
  <mat-card-content>
    <mat-accordion>
      <ng-container *ngFor="let category of getAlertsByCategory() | keyvalue">
        <mat-expansion-panel>
          <mat-expansion-panel-header>
            <mat-panel-title>
              {{ category.key }}
            </mat-panel-title>
            <mat-panel-description>
              {{ category.value.length }} alertes
            </mat-panel-description>
          </mat-expansion-panel-header>
          
          <mat-list dense>
            <mat-list-item *ngFor="let alert of category.value">
              <mat-icon mat-list-icon [color]="alert.severity">
                {{ getAlertIcon(alert.severity) }}
              </mat-icon>
              <div mat-line>{{ alert.type }}</div>
              <div mat-line *ngIf="alert.timestamp" class="timestamp">
                {{ alert.timestamp | date:'dd/MM/yyyy HH:mm' }}
              </div>
            </mat-list-item>
          </mat-list>
        </mat-expansion-panel>
      </ng-container>
    </mat-accordion>
  </mat-card-content>
</mat-card>









getAlertIcon(severity: string): string {
  switch(severity) {
    case 'error': return 'error';
    case 'warning': return 'warning';
    default: return 'info';
  }
}










// Styles pour les alertes
.mat-expansion-panel {
  margin-bottom: 8px;
  
  .mat-expansion-panel-header {
    padding: 0 16px;
  }
}

.timestamp {
  font-size: 0.75rem;
  color: rgba(0, 0, 0, 0.54);
}

// Couleurs pour les différents types d'alertes
.mat-icon[color="error"] {
  color: #f44336;
}

.mat-icon[color="warning"] {
  color: #ff9800;
}

.mat-icon[color="info"] {
  color: #2196f3;
}







// Ajoutez dans votre composant
markAsResolved(alertId: number): void {
  this.alerts = this.alerts.filter(a => a.id !== alertId);
  // Ici vous pourriez aussi faire un appel API pour mettre à jour le backend
}

// Et dans le template, ajoutez un bouton de fermeture :
<button mat-icon-button (click)="markAsResolved(alert.id)">
  <mat-icon>close</mat-icon>
</button>










<mat-form-field>
  <mat-label>Période</mat-label>
  <mat-select [(value)]="selectedPeriod" (selectionChange)="updateChart()">
    <mat-option value="7">7 derniers jours</mat-option>
    <mat-option value="30">30 derniers jours</mat-option>
    <mat-option value="90">3 derniers mois</mat-option>
  </mat-select>
</mat-form-field>







exportToExcel(): void {
  const data = this.barChartData.datasets[0].data.map((value, index) => ({
    Mois: this.barChartData.labels[index],
    Factures: value
  }));
  
  // Utiliser une librairie comme xlsx pour générer le fichier Excel
}



