import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.security.oauth2.jwt.Jwt;

import java.util.*;

import static org.mockito.Mockito.*;

class UserSynchronizerTest {

    private UserRepository userRepository;
    private UserSynchronizer userSynchronizer;

    @BeforeEach
    void setup() {
        userRepository = mock(UserRepository.class);
        userSynchronizer = new UserSynchronizer(userRepository);
    }

    @Test
    void syncWithIdp_shouldUpdateExistingUser_ifAuthoritiesDiffer() {
        // Fake JWT token
        Jwt jwt = mock(Jwt.class);
        Map<String, Object> claims = Map.of("email", "user@test.com");
        when(jwt.getClaims()).thenReturn(claims);

        // Simule les rôles du token
        List<String> rolesFromToken = List.of("ROLE_USER");

        // Utilisateur extrait du token
        User userFromToken = User.fromTokenUserInfo(claims, rolesFromToken);

        // Utilisateur existant avec un autre rôle
        User existingUser = new User();
        existingUser.setEmail(new UserEmail("user@test.com"));
        existingUser.setAuthorities(Set.of(new Authority(new AuthorityName("ROLE_ADMIN"))));

        when(userRepository.getOneByEmail(new UserEmail("user@test.com")))
                .thenReturn(Optional.of(existingUser));

        // Exécute
        userSynchronizer.syncWithIdp(jwt, claims);

        // Vérifie la mise à jour
        assert existingUser.getAuthorities().contains(new Authority(new AuthorityName("ROLE_USER")));
        verify(userRepository).save(existingUser);
    }
}