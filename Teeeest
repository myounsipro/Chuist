import { Component, OnInit } from '@angular/core';
import { ChartConfiguration } from 'chart.js';

@Component({
  selector: 'app-dashboard',
  templateUrl: './dashboard.component.html',
  styleUrls: ['./dashboard.component.scss']
})
export class DashboardComponent implements OnInit {
  // Données pour les cartes
  invoicesStats = {
    success: 65,
    failure: 0,
    total: 65
  };

  jobStatus = {
    status: 'up',
    lastRun: new Date('2025-05-14T10:30:00')
  };

  alerts = [
    { id: 1, message: 'Espace disque faible', severity: 'warning' },
    { id: 2, message: 'Mise à jour disponible', severity: 'info' }
  ];

  // Données pour le graphique
  public barChartData: ChartConfiguration<'bar'>['data'] = {
    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'Mai', 'Jun', 'Jul'],
    datasets: [
      { 
        data: [30, 80, 70, 60, 50, 40, 30], 
        label: 'Factures générées',
        backgroundColor: '#3f51b5'
      }
    ]
  };

  public barChartOptions: ChartConfiguration<'bar'>['options'] = {
    responsive: true,
    scales: {
      y: {
        beginAtZero: true
      }
    }
  };

  ngOnInit(): void {
    // Ici vous pourriez faire des appels API pour récupérer les données
  }

  generateNewInvoice(): void {
    // Logique pour générer une nouvelle facture
    console.log('Nouvelle facture demandée');
  }
}








<div class="dashboard-container">
  <!-- En-tête -->
  <div class="dashboard-header">
    <h1>Tableau de Bord Facturation</h1>
    <button mat-raised-button color="primary" (click)="generateNewInvoice()">
      <mat-icon>add</mat-icon> Nouvelle Facture
    </button>
  </div>

  <!-- Cartes de statistiques -->
  <div class="dashboard-cards">
    <!-- Carte Statistiques Factures -->
    <mat-card class="dashboard-card">
      <mat-card-header>
        <mat-card-title>Factures générées</mat-card-title>
      </mat-card-header>
      <mat-card-content>
        <div class="stats-container">
          <div class="stat-item success">
            <span class="stat-value">{{ invoicesStats.success }}</span>
            <span class="stat-label">Succès</span>
          </div>
          <div class="stat-item failure">
            <span class="stat-value">{{ invoicesStats.failure }}</span>
            <span class="stat-label">Échec</span>
          </div>
        </div>
        <mat-progress-bar 
          mode="determinate" 
          [value]="(invoicesStats.success / invoicesStats.total) * 100" 
          color="primary">
        </mat-progress-bar>
      </mat-card-content>
    </mat-card>

    <!-- Carte État des Jobs -->
    <mat-card class="dashboard-card">
      <mat-card-header>
        <mat-card-title>État des Jobs</mat-card-title>
      </mat-card-header>
      <mat-card-content>
        <div class="job-status" [class.up]="jobStatus.status === 'up'">
          <mat-icon>{{ jobStatus.status === 'up' ? 'check_circle' : 'error' }}</mat-icon>
          <span>Status: {{ jobStatus.status | uppercase }}</span>
        </div>
        <div class="last-run">
          Dernier run: {{ jobStatus.lastRun | date:'dd-MM-yyyy HH:mm' }}
        </div>
      </mat-card-content>
    </mat-card>

    <!-- Carte Alertes -->
    <mat-card class="dashboard-card">
      <mat-card-header>
        <mat-card-title>Alertes</mat-card-title>
        <span class="badge">{{ alerts.length }}</span>
      </mat-card-header>
      <mat-card-content>
        <mat-list>
          <mat-list-item *ngFor="let alert of alerts">
            <mat-icon mat-list-icon [color]="alert.severity">{{ 
              alert.severity === 'warning' ? 'warning' : 'info' 
            }}</mat-icon>
            <div mat-line>{{ alert.message }}</div>
          </mat-list-item>
        </mat-list>
      </mat-card-content>
    </mat-card>
  </div>

  <!-- Graphique -->
  <mat-card class="chart-card">
    <mat-card-header>
      <mat-card-title>Factures générées par mois</mat-card-title>
    </mat-card-header>
    <mat-card-content>
      <canvas baseChart 
        [data]="barChartData"
        [options]="barChartOptions"
        [type]="'bar'">
      </canvas>
    </mat-card-content>
  </mat-card>
</div>










.dashboard-container {
  padding: 20px;
}

.dashboard-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

.dashboard-cards {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 20px;
  margin-bottom: 20px;
}

.dashboard-card {
  height: 100%;
}

.stats-container {
  display: flex;
  justify-content: space-around;
  margin: 20px 0;
}

.stat-item {
  display: flex;
  flex-direction: column;
  align-items: center;
  
  .stat-value {
    font-size: 2rem;
    font-weight: bold;
  }

  &.success .stat-value {
    color: #4caf50;
  }

  &.failure .stat-value {
    color: #f44336;
  }
}

.job-status {
  display: flex;
  align-items: center;
  margin-bottom: 10px;
  
  mat-icon {
    margin-right: 10px;
  }

  &.up {
    color: #4caf50;
  }
}

.badge {
  background: #f44336;
  color: white;
  border-radius: 50%;
  width: 24px;
  height: 24px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 0.8rem;
}

.chart-card {
  margin-top: 20px;
}








<mat-form-field>
  <mat-label>Période</mat-label>
  <mat-select [(value)]="selectedPeriod" (selectionChange)="updateChart()">
    <mat-option value="7">7 derniers jours</mat-option>
    <mat-option value="30">30 derniers jours</mat-option>
    <mat-option value="90">3 derniers mois</mat-option>
  </mat-select>
</mat-form-field>







exportToExcel(): void {
  const data = this.barChartData.datasets[0].data.map((value, index) => ({
    Mois: this.barChartData.labels[index],
    Factures: value
  }));
  
  // Utiliser une librairie comme xlsx pour générer le fichier Excel
}



