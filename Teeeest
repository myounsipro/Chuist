@ExtendWith(MockitoExtension.class)
class CosConfigTest {

    @InjectMocks
    private CosConfig cosConfig;

    @Mock
    private CosProperties cosProperties;

    @Test
    void shouldCreateCosClient() {
        // Mock CosProperties getters
        when(cosProperties.getBucketName()).thenReturn("test-bucket");
        when(cosProperties.getApiKey()).thenReturn("dummy-api-key");
        when(cosProperties.getServiceInstanceId()).thenReturn("dummy-instance-id");
        when(cosProperties.getAccessKey()).thenReturn("access");
        when(cosProperties.getSecretKey()).thenReturn("secret");
        when(cosProperties.getEndpointUri()).thenReturn("https://s3.test.ibm.com");
        when(cosProperties.getLocation()).thenReturn("eu-geo");
        when(cosProperties.getTimeout()).thenReturn(5000);
        when(cosProperties.getKeepAlive()).thenReturn(true);
        when(cosProperties.getProxyAddress()).thenReturn(null);

        CosClientImpl client = cosConfig.cosClient(cosProperties);

        assertNotNull(client);
    }
}


@Test
void shouldCreateAmazonS3Client() {
    when(cosProperties.getApiKey()).thenReturn("key");
    when(cosProperties.getServiceInstanceId()).thenReturn("instance");
    when(cosProperties.getAccessKey()).thenReturn("access");
    when(cosProperties.getSecretKey()).thenReturn("secret");
    when(cosProperties.getEndpointUri()).thenReturn("https://s3.test.ibm.com");
    when(cosProperties.getLocation()).thenReturn("eu-geo");
    when(cosProperties.getTimeout()).thenReturn(5000);
    when(cosProperties.getKeepAlive()).thenReturn(true);
    when(cosProperties.getProxyAddress()).thenReturn(null);

    AmazonS3 client = ReflectionTestUtils.invokeMethod(cosConfig, "createClient", cosProperties);
    assertNotNull(client);
}