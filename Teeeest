import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.mockito.MockedStatic;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.oauth2.jwt.JwtClaimNames;
import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationToken;
import org.springframework.security.core.authority.SimpleGrantedAuthority;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class WebSsoJwtHelperTest {

    private WebSsoJwtHelper helper;
    private final String issuer = "https://sso.example.com";

    @BeforeEach
    void setUp() {
        helper = new WebSsoJwtHelper(issuer);
    }

    @Test
    void isWebSsoJwt_shouldReturnTrue_whenIssuerMatches() {
        JwtAuthenticationToken token = mock(JwtAuthenticationToken.class);
        when(token.getToken()).thenReturn(mockTokenWithIssuer(issuer));

        assertTrue(helper.isWebSsoJwt(token));
    }

    @Test
    void isWebSsoJwt_shouldReturnFalse_whenIssuerIsDifferent() {
        JwtAuthenticationToken token = mock(JwtAuthenticationToken.class);
        when(token.getToken()).thenReturn(mockTokenWithIssuer("wrong-issuer"));

        assertFalse(helper.isWebSsoJwt(token));
    }

    @Test
    void webSsoAuthorities_shouldReturnCombinedAuthorities() {
        JwtAuthenticationToken token = mock(JwtAuthenticationToken.class);

        Map<String, Object> attributes = Map.of(
            "roles", List.of("READ", "WRITE")
        );
        when(token.getAuthorities()).thenReturn(Set.of(new SimpleGrantedAuthority("EXISTING")));
        when(token.getTokenAttributes()).thenReturn(attributes);

        Set<GrantedAuthority> result = helper.webSsoAuthorities(token);

        assertEquals(3, result.size());
        assertTrue(result.contains(new SimpleGrantedAuthority("EXISTING")));
        assertTrue(result.contains(new SimpleGrantedAuthority("BASE_HABI_READ")));
        assertTrue(result.contains(new SimpleGrantedAuthority("BASE_HABI_WRITE")));
    }

    private Jwt mockTokenWithIssuer(String issuerValue) {
        Jwt jwt = mock(Jwt.class);
        when(jwt.getClaimAsString(JwtClaimNames.ISS)).thenReturn(issuerValue);
        return jwt;
    }
}