
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.List;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

class InvoiceLineReaderWriterTest {

    private InvoiceLineRepository invoiceLineRepository;
    private InvoiceLineReaderWriter invoiceLineReaderWriter;

    @BeforeEach
    void setUp() {
        invoiceLineRepository = mock(InvoiceLineRepository.class);
        invoiceLineReaderWriter = new InvoiceLineReaderWriter(invoiceLineRepository);
    }

    @Test
    void save_shouldDelegateToRepository() {
        InvoiceLine invoiceLine = mock(InvoiceLine.class);

        invoiceLineReaderWriter.save(invoiceLine);

        verify(invoiceLineRepository).save(invoiceLine);
    }

    @Test
    void getAll_shouldReturnListFromRepository() {
        List<InvoiceLine> expected = List.of(mock(InvoiceLine.class));
        when(invoiceLineRepository.getAll()).thenReturn(expected);

        List<InvoiceLine> result = invoiceLineReaderWriter.getAll();

        assertEquals(expected, result);
        verify(invoiceLineRepository).getAll();
    }

    @Test
    void getByInvoiceId_shouldReturnMatchingLines() {
        Long invoiceId = 123L;
        List<InvoiceLine> expected = List.of(mock(InvoiceLine.class));
        when(invoiceLineRepository.getOneByInvoiceId(invoiceId)).thenReturn(expected);

        List<InvoiceLine> result = invoiceLineReaderWriter.getByInvoiceId(invoiceId);

        assertEquals(expected, result);
        verify(invoiceLineRepository).getOneByInvoiceId(invoiceId);
    }
}