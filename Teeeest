;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class UserReaderTest {

    private UserRepository userRepository;
    private UserReader userReader;

    @BeforeEach
    void setUp() {
        userRepository = mock(UserRepository.class);
        userReader = new UserReader(userRepository);
    }

    @Test
    void getByEmail_shouldReturnUser_ifExists() {
        // Given
        UserEmail email = new UserEmail("user@example.com");
        User user = new User();
        when(userRepository.getOneByEmail(email)).thenReturn(Optional.of(user));

        // When
        Optional<User> result = userReader.getByEmail(email);

        // Then
        assertTrue(result.isPresent());
        assertEquals(user, result.get());
        verify(userRepository).getOneByEmail(email);
    }

    @Test
    void getByEmail_shouldReturnEmpty_ifNotExists() {
        // Given
        UserEmail email = new UserEmail("unknown@example.com");
        when(userRepository.getOneByEmail(email)).thenReturn(Optional.empty());

        // When
        Optional<User> result = userReader.getByEmail(email);

        // Then
        assertTrue(result.isEmpty());
        verify(userRepository).getOneByEmail(email);
    }

    @Test
    void getByUserPublicId_shouldReturnUser_ifExists() {
        // Given
        UserPublicId userPublicId = new UserPublicId("PUBLIC-ID-123");
        User user = new User();
        when(userRepository.getOneByUserPublicId(userPublicId)).thenReturn(Optional.of(user));

        // When
        Optional<User> result = userReader.getByUserPublicId(userPublicId);

        // Then
        assertTrue(result.isPresent());
        assertEquals(user, result.get());
        verify(userRepository).getOneByUserPublicId(userPublicId);
    }

    @Test
    void getByUserPublicId_shouldReturnEmpty_ifNotExists() {
        // Given
        UserPublicId userPublicId = new UserPublicId("UNKNOWN-ID");
        when(userRepository.getOneByUserPublicId(userPublicId)).thenReturn(Optional.empty());

        // When
        Optional<User> result = userReader.getByUserPublicId(userPublicId);

        // Then
        assertTrue(result.isEmpty());
        verify(userRepository).getOneByUserPublicId(userPublicId);
    }
}