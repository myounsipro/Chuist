it('should call GET /download-excel with correct params and return a blob', () => {
  const httpMock = TestBed.inject(HttpClient) as jest.Mocked<HttpClient>;
  const dummyBlob = new Blob(['test'], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });

  httpMock.get.mockReturnValue(of(dummyBlob));

  const invoiceId = 42;

  service.downloadExcel(invoiceId).subscribe((result) => {
    expect(result).toBe(dummyBlob);
  });

  expect(httpMock.get).toHaveBeenCalledWith(
    `${appConfigMock.url}${appConfigMock.basepath}/download-excel`,
    { params: { invoiceId }, responseType: 'blob' }
  );
});





it('should call POST /download-zip with invoiceIds and return a blob', () => {
  const httpMock = TestBed.inject(HttpClient) as jest.Mocked<HttpClient>;
  const dummyBlob = new Blob(['zipcontent'], { type: 'application/zip' });

  httpMock.post.mockReturnValue(of(dummyBlob));

  const invoiceIds = [1, 2, 3];

  service.downloadZip(invoiceIds).subscribe((result) => {
    expect(result).toBe(dummyBlob);
  });

  expect(httpMock.post).toHaveBeenCalledWith(
    `${appConfigMock.url}${appConfigMock.basepath}/download-zip`,
    invoiceIds,
    { responseType: 'blob' }
  );
});





