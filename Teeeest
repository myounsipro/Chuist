
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.http.ResponseEntity;

import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class InvoiceControllerTest {

    private InvoiceApplicationService invoiceApplicationService;
    private InvoiceFileApplicationService invoiceFileApplicationService;
    private InvoiceController controller;

    @BeforeEach
    void setUp() {
        invoiceApplicationService = mock(InvoiceApplicationService.class);
        invoiceFileApplicationService = mock(InvoiceFileApplicationService.class);
        controller = new InvoiceController(invoiceApplicationService, invoiceFileApplicationService);
    }

    @Test
    void getAllInvoices_shouldReturnList() {
        List<RestInvoiceFile> invoices = List.of(new RestInvoiceFile(...));
        when(invoiceApplicationService.getAllInvoice()).thenReturn(invoices);

        List<RestInvoiceFile> result = controller.getAllInvoice();

        assertEquals(invoices, result);
        verify(invoiceApplicationService).getAllInvoice();
    }

    @Test
    void getLatestInvoices_shouldReturnPaginatedResult() {
        PaginatedResult<RestInvoiceFile> page = new PaginatedResult<>(List.of(new RestInvoiceFile(...)), 1, 0, 10);
        PaginationRequest request = new PaginationRequest(0, 10);
        when(invoiceApplicationService.getLatestInvoices(request)).thenReturn(page);

        var result = controller.getLatestInvoices(0, 10);

        assertEquals(page, result);
        verify(invoiceApplicationService).getLatestInvoices(request);
    }

    @Test
    void getByInvoiceNumber_shouldReturnMatchingInvoices() {
        String invoiceNumber = "INV-001";
        List<RestInvoiceFile> invoices = List.of(new RestInvoiceFile(...));
        when(invoiceApplicationService.getByInvoiceNumber(invoiceNumber)).thenReturn(invoices);

        List<RestInvoiceFile> result = controller.getByInvoiceNumber(invoiceNumber);

        assertEquals(invoices, result);
        verify(invoiceApplicationService).getByInvoiceNumber(invoiceNumber);
    }

    @Test
    void getFilteredInvoices_shouldReturnBadRequest_ifPeriodIsMissing() {
        ResponseEntity<InvoiceFileResponse> response = controller.getFilteredInvoices("", null, null, null, null);
        assertEquals(400, response.getStatusCodeValue());
        assertTrue(response.getBody().getError().contains("period"));
    }

    @Test
    void getFilteredInvoices_shouldReturnFilteredResult() {
        String period = "2024-01";
        RestInvoiceFile match = new RestInvoiceFile(...);
        List<RestInvoiceFile> all = List.of(match);

        when(invoiceFileApplicationService.getAllInvoice(eq(period), eq(""))).thenReturn(all);

        ResponseEntity<InvoiceFileResponse> response = controller.getFilteredInvoices(period, null, null, null, null);

        assertEquals(200, response.getStatusCodeValue());
        assertTrue(response.getBody().getInvoices().contains(match));
    }
}