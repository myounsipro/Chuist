;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.Optional;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class SpringDataUserRepositoryTest {

    private JpaUserRepository jpaUserRepository;
    private UserRepository userRepository;

    @BeforeEach
    void setUp() {
        jpaUserRepository = mock(JpaUserRepository.class);
        userRepository = new SpringDataUserRepository(jpaUserRepository);
    }

    @Test
    void shouldSaveNewUser_whenIdIsNull() {
        User user = mock(User.class);
        when(user.getDbId()).thenReturn(null);
        UserEntity userEntity = mock(UserEntity.class);
        when(UserEntity.from(user)).thenReturn(userEntity);

        userRepository.save(user);

        verify(jpaUserRepository).save(userEntity);
    }

    @Test
    void shouldUpdateExistingUser_whenIdExists() {
        Long id = 1L;
        User user = mock(User.class);
        when(user.getDbId()).thenReturn(id);

        UserEntity existingEntity = mock(UserEntity.class);
        when(jpaUserRepository.findById(id)).thenReturn(Optional.of(existingEntity));
        when(user.getAuthorities()).thenReturn(Set.of());
        when(existingEntity.getAuthorities()).thenReturn(Set.of());

        userRepository.save(user);

        verify(existingEntity).updateFromUser(user);
        verify(jpaUserRepository).saveAndFlush(existingEntity);
    }

    @Test
    void shouldGetUserByEmail() {
        UserEmail email = new UserEmail("test@example.com");
        UserEntity entity = mock(UserEntity.class);
        User user = mock(User.class);

        when(jpaUserRepository.findByEmail(email.value())).thenReturn(Optional.of(entity));
        when(entity.toDomain()).thenReturn(user);

        Optional<User> result = userRepository.getOneByEmail(email);

        assertTrue(result.isPresent());
        assertEquals(user, result.get());
    }

    @Test
    void shouldGetUserByUserUid() {
        UserUid uid = new UserUid("uid-123");
        UserEntity entity = mock(UserEntity.class);
        User user = mock(User.class);

        when(jpaUserRepository.findByUserUid(uid.value())).thenReturn(Optional.of(entity));
        when(entity.toDomain()).thenReturn(user);

        Optional<User> result = userRepository.getOneByUserUid(uid);

        assertTrue(result.isPresent());
        assertEquals(user, result.get());
    }

    @Test
    void shouldGetUserByUserPublicId() {
        UserPublicId pid = new UserPublicId("public-id");
        UserEntity entity = mock(UserEntity.class);
        User user = mock(User.class);

        when(jpaUserRepository.findOneByPublicId(pid.value())).thenReturn(Optional.of(entity));
        when(entity.toDomain()).thenReturn(user);

        Optional<User> result = userRepository.getOneByUserPublicId(pid);

        assertTrue(result.isPresent());
        assertEquals(user, result.get());
    }
}