import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.model.ObjectMetadata;
import com.amazonaws.services.s3.model.PutObjectRequest;
import com.bnpp.pf.octa.batch.cos.CosClientImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.io.File;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class CosClientImplTest {

    @Mock
    private AmazonS3 amazonS3;

    private CosClientImpl cosClient;

    private final String bucketName = "test-bucket";

    @BeforeEach
    void setUp() {
        cosClient = new CosClientImpl(bucketName, amazonS3);
    }

    @Test
    void shouldUploadFileToS3WithCorrectParameters() throws Exception {
        // Arrange
        File file = File.createTempFile("test-file", ".txt");
        file.deleteOnExit();

        String contentType = "text/plain";
        String path = "some/path/file.txt";

        // Act
        cosClient.upload(file, contentType, path);

        // Assert
        ArgumentCaptor<PutObjectRequest> requestCaptor = ArgumentCaptor.forClass(PutObjectRequest.class);
        verify(amazonS3, times(1)).putObject(requestCaptor.capture());

        PutObjectRequest actualRequest = requestCaptor.getValue();

        assertThat(actualRequest.getBucketName()).isEqualTo(bucketName);
        assertThat(actualRequest.getKey()).isEqualTo(path);
        assertThat(actualRequest.getFile()).isEqualTo(file);
        ObjectMetadata metadata = actualRequest.getMetadata();
        assertThat(metadata.getContentType()).isEqualTo(contentType);
        assertThat(metadata.getContentLength()).isEqualTo(file.length());
    }
}