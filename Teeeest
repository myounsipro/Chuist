import jakarta.validation.ConstraintViolation;
import jakarta.validation.ConstraintViolationException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.http.ProblemDetail;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;

import java.lang.reflect.Method;
import java.util.List;
import java.util.Map;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class BeanValidationErrorsHandlerTest {

    private BeanValidationErrorsHandler handler;

    @BeforeEach
    void setUp() {
        handler = new BeanValidationErrorsHandler();
    }

    @Test
    void shouldHandleMethodArgumentNotValidException() {
        // Arrange
        BindingResult bindingResult = mock(BindingResult.class);
        FieldError error1 = new FieldError("object", "email", "must be valid");
        FieldError error2 = new FieldError("object", "name", "must not be blank");

        when(bindingResult.getFieldErrors()).thenReturn(List.of(error1, error2));

        MethodArgumentNotValidException exception = new MethodArgumentNotValidException(
                mock(Method.class), bindingResult);

        // Act
        ProblemDetail detail = handler.handleConstraintViolationException(exception);

        // Assert
        assertEquals("Bean validation error", detail.getTitle());
        Map<String, String> errors = (Map<String, String>) detail.getProperties().get("errors");
        assertEquals("must be valid", errors.get("email"));
        assertEquals("must not be blank", errors.get("name"));
    }

    @Test
    void shouldHandleConstraintViolationException() {
        // Arrange
        ConstraintViolation<?> violation1 = mock(ConstraintViolation.class);
        ConstraintViolation<?> violation2 = mock(ConstraintViolation.class);

        when(violation1.getPropertyPath()).thenReturn(() -> "dto.email");
        when(violation1.getMessage()).thenReturn("must be valid");

        when(violation2.getPropertyPath()).thenReturn(() -> "dto.name");
        when(violation2.getMessage()).thenReturn("must not be blank");

        ConstraintViolationException exception = new ConstraintViolationException(Set.of(violation1, violation2));

        // Act
        ProblemDetail detail = handler.handleConstraintViolationException(exception);

        // Assert
        assertEquals("Bean validation error", detail.getTitle());
        Map<String, String> errors = (Map<String, String>) detail.getProperties().get("errors");
        assertEquals("must be valid", errors.get("email"));
        assertEquals("must not be blank", errors.get("name"));
    }
}