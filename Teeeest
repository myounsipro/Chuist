@ExtendWith(MockitoExtension.class)
class SpringDataInsurerRepositoryTest {

    @InjectMocks
    private SpringDataInsurerRepository repository;

    @Mock
    private JpaInsurerRepository jpaRepository;

    @Test
    void shouldReturnInsurerBySirenNumber() {
        String siren = "123456789";
        InsurerEntity entity = mock(InsurerEntity.class);
        Insurer insurer = mock(Insurer.class);

        when(jpaRepository.findBySirenNumber(siren)).thenReturn(Optional.of(entity));

        try (MockedStatic<InsurerEntity> mocked = mockStatic(InsurerEntity.class)) {
            mocked.when(() -> InsurerEntity.toDomain(entity)).thenReturn(insurer);

            Optional<Insurer> result = repository.getOneBySirenNumber(siren);

            assertTrue(result.isPresent());
            assertEquals(insurer, result.get());
        }
    }

    @Test
    void shouldReturnInsurerByFullName() {
        String fullName = "Banque Assurance SA";
        InsurerEntity entity = mock(InsurerEntity.class);
        Insurer insurer = mock(Insurer.class);

        when(jpaRepository.findByFullName(fullName)).thenReturn(Optional.of(entity));

        try (MockedStatic<InsurerEntity> mocked = mockStatic(InsurerEntity.class)) {
            mocked.when(() -> InsurerEntity.toDomain(entity)).thenReturn(insurer);

            Optional<Insurer> result = repository.getOneByFullName(fullName);

            assertTrue(result.isPresent());
            assertEquals(insurer, result.get());
        }
    }

    @Test
    void shouldReturnAllInsurers() {
        List<InsurerEntity> entities = List.of(mock(InsurerEntity.class), mock(InsurerEntity.class));
        List<Insurer> expected = List.of(mock(Insurer.class), mock(Insurer.class));

        when(jpaRepository.findAll()).thenReturn(entities);

        try (MockedStatic<InsurerEntity> mocked = mockStatic(InsurerEntity.class)) {
            mocked.when(() -> InsurerEntity.toDomainList(entities)).thenReturn(expected);

            List<Insurer> result = repository.getAll();

            assertEquals(2, result.size());
        }
    }
}