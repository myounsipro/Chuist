/*

public class TestFixtures {

    public static RestInvoiceFile restInvoiceFile() {
        return new RestInvoiceFile(
                1L,
                1001L,
                2,
                "INV-2024-0001",
                "KEY-XYZ",
                "BNPP Assurance",
                "2024-12-31",
                "HEALTH",
                "invoice_INV-2024-0001.pdf",
                "/invoices/2024/INV-2024-0001.pdf"
        );
    }
}
*/;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class InvoiceFileControllerTest {

    private InvoiceFileApplicationService invoiceFileApplicationService;
    private InvoiceFileController controller;

    @BeforeEach
    void setUp() {
        invoiceFileApplicationService = mock(InvoiceFileApplicationService.class);
        controller = new InvoiceFileController(invoiceFileApplicationService);
    }

    @Test
    void getAllInvoiceFiles_shouldReturnList() {
        List<RestInvoiceFile> mockList = List.of(new RestInvoiceFile(), new RestInvoiceFile());
        when(invoiceFileApplicationService.getAllInvoice()).thenReturn(mockList);

        List<RestInvoiceFile> result = controller.getAllInvoiceFile();

        assertEquals(mockList, result);
        verify(invoiceFileApplicationService).getAllInvoice();
    }

    @Test
    void getLatestInvoiceFiles_shouldReturnPaginatedResult() {
        PaginatedResult<RestInvoiceFile> mockPage = new PaginatedResult<>(List.of(new RestInvoiceFile()), 1, 0, 10);
        when(invoiceFileApplicationService.getLatestInvoiceFiles(new PaginationRequest(0, 10)))
            .thenReturn(mockPage);

        var result = controller.getLatestInvoiceFiles(0, 10);

        assertEquals(mockPage, result);
        verify(invoiceFileApplicationService).getLatestInvoiceFiles(new PaginationRequest(0, 10));
    }

    @Test
    void getByInvoiceNumber_shouldReturnList() {
        String invoiceNumber = "INV123";
        List<RestInvoiceFile> mockResult = List.of(new RestInvoiceFile());
        when(invoiceFileApplicationService.getByInvoiceNumber(invoiceNumber)).thenReturn(mockResult);

        List<RestInvoiceFile> result = controller.getByInvoiceNumber(invoiceNumber);

        assertEquals(mockResult, result);
        verify(invoiceFileApplicationService).getByInvoiceNumber(invoiceNumber);
    }

    @Test
    void getFilters_shouldReturnInvoiceFilter() {
        InvoiceFilter filter = new InvoiceFilter(); // adapt if needed
        when(invoiceFileApplicationService.getFilters()).thenReturn(filter);

        InvoiceFilter result = controller.getFilters();

        assertEquals(filter, result);
        verify(invoiceFileApplicationService).getFilters();
    }
}