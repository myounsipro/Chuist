
import org.junit.jupiter.api.Test;

import java.util.List;
import java.util.Map;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.*;

class UserTest {

    @Test
    void fromTokenUserInfo_should_map_fields_correctly_with_all_claims_present() {
        Map<String, Object> claims = Map.of(
                "sub", "abc-123",
                "preferred_username", "john.doe",
                "given_name", "John",
                "family_name", "Doe",
                "email", "john.doe@example.com"
        );

        List<String> roles = List.of("ROLE_USER", "ROLE_ADMIN");

        User user = User.fromTokenUserInfo(claims, roles);

        assertEquals(new UserEmail("john.doe@example.com"), user.getEmail());
        assertEquals(new UserFirstname("John"), user.getFirstname());
        assertEquals(new UserLastname("Doe"), user.getLastName());
        assertEquals(new UserUid("abc-123"), user.getUserUid());

        Set<Authority> expectedAuthorities = Set.of(
                new Authority(new AuthorityName("ROLE_USER")),
                new Authority(new AuthorityName("ROLE_ADMIN"))
        );

        assertEquals(expectedAuthorities, user.getAuthorities());
    }

    @Test
    void fromTokenUserInfo_should_fallback_to_sub_as_email_if_email_missing() {
        Map<String, Object> claims = Map.of(
                "sub", "abc-123"
        );

        List<String> roles = List.of("ROLE_USER");

        User user = User.fromTokenUserInfo(claims, roles);

        assertEquals(new UserEmail("abc-123"), user.getEmail());
        assertEquals(new UserUid("abc-123"), user.getUserUid());
        assertEquals(Set.of(new Authority(new AuthorityName("ROLE_USER"))), user.getAuthorities());
    }

    @Test
    void fromTokenUserInfo_should_use_username_when_email_and_sub_are_unusable() {
        Map<String, Object> claims = Map.of(
                "sub", "user123",
                "preferred_username", "someuser@example.com"
        );

        List<String> roles = List.of();

        User user = User.fromTokenUserInfo(claims, roles);

        assertEquals(new UserEmail("someuser@example.com"), user.getEmail());
        assertEquals(new UserUid("user123"), user.getUserUid());
    }

    @Test
    void fromTokenUserInfo_should_handle_missing_names_gracefully() {
        Map<String, Object> claims = Map.of(
                "sub", "uid-001",
                "email", "anonymous@example.com"
        );

        List<String> roles = List.of();

        User user = User.fromTokenUserInfo(claims, roles);

        assertNull(user.getFirstname());
        assertNull(user.getLastName());
        assertEquals(new UserEmail("anonymous@example.com"), user.getEmail());
        assertEquals(new UserUid("uid-001"), user.getUserUid());
        assertTrue(user.getAuthorities().isEmpty());
    }
}