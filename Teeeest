
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class UsersResourceTest {

    private UsersApplicationService usersApplicationService;
    private UsersResource usersResource;

    @BeforeEach
    void setUp() {
        usersApplicationService = mock(UsersApplicationService.class);
        usersResource = new UsersResource(usersApplicationService);
    }

    @Test
    void getAuthenticatedUser_shouldReturnNotFound_whenUserUidIsBlank() {
        User user = mock(User.class);
        RestUser restUser = mock(RestUser.class);
        when(usersApplicationService.getAuthenticatedUserAndSync()).thenReturn(user);
        when(restUser.userUid()).thenReturn(""); // simulate blank uid
        mockStatic(RestUser.class).when(() -> RestUser.from(user)).thenReturn(restUser);

        ResponseEntity<RestUser> response = usersResource.getAuthenticatedUser();

        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
        assertNull(response.getBody());
    }

    @Test
    void getAuthenticatedUser_shouldReturnOk_whenUserUidIsPresent() {
        User user = mock(User.class);
        RestUser restUser = mock(RestUser.class);
        when(usersApplicationService.getAuthenticatedUserAndSync()).thenReturn(user);
        when(restUser.userUid()).thenReturn("someUid");
        mockStatic(RestUser.class).when(() -> RestUser.from(user)).thenReturn(restUser);

        ResponseEntity<RestUser> response = usersResource.getAuthenticatedUser();

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(restUser, response.getBody());
    }

    @Test
    void getUser_shouldReturnOk() {
        String userId = "user-123";
        User user = mock(User.class);
        RestUser restUser = mock(RestUser.class);

        when(usersApplicationService.getUserByUserPublicId(userId)).thenReturn(user);
        mockStatic(RestUser.class).when(() -> RestUser.from(user)).thenReturn(restUser);

        ResponseEntity<RestUser> response = usersResource.getUser(userId);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(restUser, response.getBody());
    }
}