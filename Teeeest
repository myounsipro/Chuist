@ExtendWith(MockitoExtension.class)
class SpringDataIssuerRepositoryTest {

    @InjectMocks
    private SpringDataIssuerRepository repository;

    @Mock
    private JpaIssuerRepository jpaIssuerRepository;

    @Test
    void shouldReturnIssuerByCompanyKey() {
        Integer companyKey = 1001;
        IssuerEntity entity = mock(IssuerEntity.class);
        Issuer expected = mock(Issuer.class);

        when(jpaIssuerRepository.findByCompanyKey(companyKey)).thenReturn(Optional.of(entity));

        try (MockedStatic<IssuerEntity> mocked = mockStatic(IssuerEntity.class)) {
            mocked.when(() -> IssuerEntity.toDomain(entity)).thenReturn(expected);

            Optional<Issuer> result = repository.getOneByCompanyKey(companyKey);

            assertTrue(result.isPresent());
            assertEquals(expected, result.get());
        }
    }

    @Test
    void shouldReturnAllIssuers() {
        List<IssuerEntity> entities = List.of(mock(IssuerEntity.class), mock(IssuerEntity.class));
        List<Issuer> expected = List.of(mock(Issuer.class), mock(Issuer.class));

        when(jpaIssuerRepository.findAll()).thenReturn(entities);

        try (MockedStatic<IssuerEntity> mocked = mockStatic(IssuerEntity.class)) {
            mocked.when(() -> IssuerEntity.toDomainList(entities)).thenReturn(expected);

            List<Issuer> result = repository.getAll();

            assertEquals(2, result.size());
        }
    }
}