

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.Set;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationToken;

class UserDetailsServiceImplTest {

    @Mock
    private WebSsoJwtHelper webSsoJwtHelper;

    @Mock
    private SecurityContext securityContext;

    @Mock
    private JwtAuthenticationToken jwtAuthenticationToken;

    private UserDetailsServiceImpl userDetailsService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        userDetailsService = new UserDetailsServiceImpl(webSsoJwtHelper);
        SecurityContextHolder.setContext(securityContext);
    }

    @Test
    void loadUserByUsername_shouldReturnUserDetails_whenWebSsoJwtValid() {
        // Given
        String username = "webssoUser";
        when(securityContext.getAuthentication()).thenReturn(jwtAuthenticationToken);
        when(webSsoJwtHelper.isWebSsoJwt(jwtAuthenticationToken)).thenReturn(true);
        Set<GrantedAuthority> authorities = Set.of(() -> "OCTA_READ");
        when(webSsoJwtHelper.webSsoAuthorities(jwtAuthenticationToken)).thenReturn(authorities);

        // When
        UserDetails userDetails = userDetailsService.loadUserByUsername(username);

        // Then
        assertEquals(username, userDetails.getUsername());
        assertTrue(userDetails.getAuthorities().stream()
                .anyMatch(a -> a.getAuthority().equals("OCTA_READ")));
    }

    @Test
    void loadUserByUsername_shouldThrowException_whenNotWebSso() {
        // Given
        String username = "notFoundUser";
        when(securityContext.getAuthentication()).thenReturn(mock(Authentication.class));

        // Then
        assertThrows(
                org.springframework.security.core.userdetails.UsernameNotFoundException.class,
                () -> userDetailsService.loadUserByUsername(username)
        );
    }
}