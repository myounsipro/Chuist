;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;

import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class SpringDataInvoiceRepositoryTest {

    private JpaInvoiceRepository jpaInvoiceRepository;
    private InvoiceRepository invoiceRepository;

    @BeforeEach
    void setUp() {
        jpaInvoiceRepository = mock(JpaInvoiceRepository.class);
        invoiceRepository = new SpringDataInvoiceRepository(jpaInvoiceRepository);
    }

    @Test
    void save_shouldDelegateToJpa() {
        Invoice invoice = mock(Invoice.class);
        InvoiceEntity entity = mock(InvoiceEntity.class);

        mockStatic(InvoiceEntity.class).when(() -> InvoiceEntity.from(invoice)).thenReturn(entity);

        invoiceRepository.save(invoice);

        verify(jpaInvoiceRepository).save(entity);
    }

    @Test
    void getAll_shouldReturnList() {
        InvoiceEntity entity = mock(InvoiceEntity.class);
        Invoice invoice = mock(Invoice.class);

        when(jpaInvoiceRepository.findAll()).thenReturn(List.of(entity));
        when(entity.toDomain()).thenReturn(invoice);

        List<Invoice> result = invoiceRepository.getAll();

        assertEquals(1, result.size());
        assertEquals(invoice, result.get(0));
    }

    @Test
    void getByInvoiceNumberAndIssuerKey_shouldReturnInvoice() {
        String number = "INV001";
        String issuer = "KEY1";
        InvoiceEntity entity = mock(InvoiceEntity.class);
        Invoice invoice = mock(Invoice.class);

        when(jpaInvoiceRepository
            .findTopByInvoiceNumberAndIssuerKeyOrderByInvoiceVersionDesc(number, issuer))
            .thenReturn(Optional.of(entity));
        when(entity.toDomain()).thenReturn(invoice);

        Optional<Invoice> result = invoiceRepository.getOneByInvoiceNumberAndIssuerKey(number, issuer);

        assertTrue(result.isPresent());
        assertEquals(invoice, result.get());
    }

    @Test
    void getByInvoiceNumberAndLatestVersion_shouldReturnInvoice() {
        String number = "INV002";
        InvoiceEntity entity = mock(InvoiceEntity.class);
        Invoice invoice = mock(Invoice.class);

        when(jpaInvoiceRepository
            .findTopByInvoiceNumberOrderByInvoiceVersionDesc(number))
            .thenReturn(Optional.of(entity));
        when(entity.toDomain()).thenReturn(invoice);

        Optional<Invoice> result = invoiceRepository.getOneByInvoiceNumberAndLatestVersion(number);

        assertTrue(result.isPresent());
        assertEquals(invoice, result.get());
    }

    @Test
    void getByInvoiceNumber_shouldReturnList() {
        String number = "INV003";
        InvoiceEntity entity = mock(InvoiceEntity.class);
        Invoice invoice = mock(Invoice.class);

        when(jpaInvoiceRepository.findByInvoiceNumber(number)).thenReturn(List.of(entity));
        when(entity.toDomain()).thenReturn(invoice);

        List<Invoice> result = invoiceRepository.getByInvoiceNumber(number);

        assertEquals(1, result.size());
        assertEquals(invoice, result.get(0));
    }

    @Test
    void findLatestInvoices_shouldReturnPaginatedResult() {
        PaginationRequest paginationRequest = new PaginationRequest(0, 5);
        InvoiceEntity entity = mock(InvoiceEntity.class);
        Invoice invoice = mock(Invoice.class);
        Page<InvoiceEntity> page = new PageImpl<>(List.of(entity), PageRequest.of(0, 5), 1);

        when(jpaInvoiceRepository.findLatestInvoices(PageRequest.of(0, 5))).thenReturn(page);
        when(entity.toDomain()).thenReturn(invoice);

        PaginatedResult<Invoice> result = invoiceRepository.findLatestInvoices(paginationRequest);

        assertEquals(1, result.elements().size());
        assertEquals(invoice, result.elements().get(0));
        assertEquals(1, result.totalElements());
        assertEquals(1, result.totalPages());
    }
}