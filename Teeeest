class CosConfigTest {

    private CosConfig cosConfig;

    @BeforeEach
    void setup() {
        cosConfig = new CosConfig();

        // Injection manuelle via réflexion (car @Value n’est pas actif en test unitaire pur)
        ReflectionTestUtils.setField(cosConfig, "apikey", "dummy-api-key");
        ReflectionTestUtils.setField(cosConfig, "serviceInstanceId", "service-id");
        ReflectionTestUtils.setField(cosConfig, "accessKey", "access-key");
        ReflectionTestUtils.setField(cosConfig, "secretKey", "secret-key");
    }

    @Test
    void shouldCreateCosClientImpl() {
        CosProperties props = new CosProperties();
        props.setBucketName("test-bucket");
        props.setEndpointUri("https://s3.test.ibm.com");
        props.setLocation("eu-geo");
        props.setKeepAlive(true);
        props.setTimeout(3000);
        props.setProxyAddress(null);

        CosClientImpl client = cosConfig.cosClient(props);

        assertNotNull(client);
    }
}