@Service
public class InvoiceZipService {

    private final AppProperties appProperties;

    public InvoiceZipService(AppProperties appProperties) {
        this.appProperties = appProperties;
    }

    public File createSecureTempZip() throws IOException {
        Path tempDir = Paths.get(appProperties.getTempDir());
        Files.createDirectories(tempDir); // S'assure que le dossier existe

        Path zipPath;
        if (SystemUtils.IS_OS_UNIX) {
            Set<PosixFilePermission> perms = PosixFilePermissions.fromString("rw-------");
            FileAttribute<Set<PosixFilePermission>> attr = PosixFilePermissions.asFileAttribute(perms);
            zipPath = Files.createTempFile(tempDir, "filtered_invoices_", ".zip", attr);
        } else {
            zipPath = Files.createTempFile(tempDir, "filtered_invoices_", ".zip");
            File zipFile = zipPath.toFile();
            zipFile.setReadable(true, true);
            zipFile.setWritable(true, true);
            zipFile.setExecutable(false, true);
        }

        zipPath.toFile().deleteOnExit(); // Nettoyage au cas o√π

        return zipPath.toFile();
    }
}





spec:
  containers:
    - name: my-app
      volumeMounts:
        - name: temp-volume
          mountPath: /tmp/app-temp
  volumes:
    - name: temp-volume
      emptyDir: {}