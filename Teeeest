it('should call getFiltredInvoices with correct query params', () => {
  const filters = { insurer: 'Aaa', year: '2024', empty: '' };
  const mockResponse = { files: [] };

  httpMock.get.mockReturnValue(of(mockResponse));

  service.getFiltredInvoices(filters).subscribe(result => {
    expect(result).toEqual(mockResponse);
  });

  const expectedUrl = `${configMock.url}${configMock.basepath}/invoices/filtered`;

  expect(httpMock.get).toHaveBeenCalledWith(expectedUrl, {
    params: expect.anything()
  });

  const calledParams = httpMock.get.mock.calls[0][1].params;
  expect(calledParams.get('insurer')).toBe('Aaa');
  expect(calledParams.get('year')).toBe('2024');
  expect(calledParams.get('empty')).toBeNull(); // ignorÃ©
});

it('should call getFiltredInvoices with no params if filters are empty', () => {
  const filters = {};
  const mockResponse = { files: [] };

  httpMock.get.mockReturnValue(of(mockResponse));

  service.getFiltredInvoices(filters).subscribe(result => {
    expect(result).toEqual(mockResponse);
  });

  const expectedUrl = `${configMock.url}${configMock.basepath}/invoices/filtered`;

  expect(httpMock.get).toHaveBeenCalledWith(expectedUrl, {
    params: expect.anything()
  });

  const calledParams = httpMock.get.mock.calls[0][1].params;
  expect(calledParams.keys().length).toBe(0);
});