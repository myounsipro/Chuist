@Override
public File downloadExcelFilesAsZip(List<String> filenames) {
    File zipFile;
    try {
        zipFile = File.createTempFile("filtered_invoices_", ".zip");

        try (FileOutputStream fos = new FileOutputStream(zipFile);
             ZipOutputStream zipOut = new ZipOutputStream(fos)) {

            for (String filename : filenames) {
                LOG.info("Downloading file from S3: {}", filename);
                buildZipFile(zipOut, filename);
            }
        }
    } catch (IOException e) {
        throw new FileRetrievalException("Failed to create zip archive", e);
    }

    return zipFile;
}

private void buildZipFile(ZipOutputStream zipOut, String filename) {
    try {
        S3Object s3Object = client.getObject(bucketName, filename);
        try (InputStream in = s3Object.getObjectContent()) {
            String zipEntryName = extractFileName(filename);
            zipOut.putNextEntry(new ZipEntry(zipEntryName));
            in.transferTo(zipOut);
            zipOut.closeEntry();
        }
    } catch (AmazonS3Exception s3e) {
        if (s3e.getStatusCode() == 404) {
            String msg = String.format("File not found in S3: %s", filename);
            LOG.error(msg, s3e);
            throw new FileNotFoundInS3Exception(filename, s3e);
        } else {
            String msg = String.format("Error retrieving file '%s' from S3", filename);
            LOG.error(msg, s3e);
            throw new FileRetrievalException(msg, s3e);
        }
    } catch (IOException ioe) {
        String msg = String.format("IO error while processing file '%s'", filename);
        LOG.error(msg, ioe);
        throw new FileRetrievalException(msg, ioe);
    }
}

private String extractFileName(String fullPath) {
    int lastSlash = fullPath.lastIndexOf('/');
    return (lastSlash >= 0) ? fullPath.substring(lastSlash + 1) : fullPath;
}