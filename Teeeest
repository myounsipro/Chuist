/*
if (existingUser.isPresent() &&
    !new HashSet<>(existingUser.get().getAuthorities())
        .equals(new HashSet<>(user.getAuthorities()))) {
    updateUserWithAuthorities(user, existingUser.get());
} else {
    userRepository.save(user);
}
*/
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;
import org.springframework.security.oauth2.jwt.Jwt;

import java.util.*;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

class UserSynchronizerTest {

    private UserRepository userRepository;
    private UserSynchronizer userSynchronizer;

    @BeforeEach
    void setup() {
        userRepository = mock(UserRepository.class);
        userSynchronizer = new UserSynchronizer(userRepository);
    }

    @Test
    void syncWithIdp_shouldNotUpdate_ifAuthoritiesAreSame() {
        Jwt jwt = mock(Jwt.class);
        Map<String, Object> claims = Map.of();
        when(jwt.getClaims()).thenReturn(claims);

        // Deux utilisateurs mockés distincts
        User incomingUser = mock(User.class);
        User existingUser = mock(User.class);

        // Rôles identiques
        Set<String> authorities = Set.of("ROLE_USER");

        when(incomingUser.getEmail()).thenReturn("test@example.com");
        when(incomingUser.getAuthorities()).thenReturn(authorities);
        when(existingUser.getAuthorities()).thenReturn(authorities);

        when(userRepository.getOneByEmail("test@example.com"))
                .thenReturn(Optional.of(existingUser));

        try (MockedStatic<AuthenticatedUser> authMock = mockStatic(AuthenticatedUser.class);
             MockedStatic<User> userMock = mockStatic(User.class)) {

            authMock.when(() -> AuthenticatedUser.extractAuthoritiesFromAttributes(claims))
                    .thenReturn(List.copyOf(authorities));

            userMock.when(() -> User.fromTokenUserInfo(any(), eq(List.copyOf(authorities))))
                    .thenReturn(incomingUser);

            userSynchronizer.syncWithIdp(jwt, claims);
        }

        // Vérifie qu'aucune mise à jour n'a eu lieu
        verify(existingUser, never()).updateFromUserWithAuthorities(any());
        verify(userRepository, never()).save(any());
    }
}