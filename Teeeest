;
import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;

import java.util.Collections;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class RolesTest {

    @Test
    void constructor_shouldWrapUnmodifiableSet() {
        Set<Role> modifiable = Set.of(Role.USER, Role.ADMIN);
        Roles roles = new Roles(modifiable);

        assertEquals(2, roles.get().size());
        assertThrows(UnsupportedOperationException.class, () -> roles.get().add(Role.ANONYMOUS));
    }

    @Test
    void hasRole_shouldReturnTrueWhenNonEmpty() {
        Roles roles = new Roles(Set.of(Role.USER));
        assertTrue(roles.hasRole());
    }

    @Test
    void hasRole_shouldReturnFalseWhenEmpty() {
        Roles roles = new Roles(Collections.emptySet());
        assertFalse(roles.hasRole());
    }

    @Test
    void hasRoleWithArgument_shouldCallAssertAndCheckMembership() {
        try (MockedStatic<Assert> mock = mockStatic(Assert.class)) {
            Roles roles = new Roles(Set.of(Role.ADMIN, Role.USER));

            assertTrue(roles.hasRole(Role.ADMIN));
            assertFalse(roles.hasRole(Role.ANONYMOUS));

            mock.verify(() -> Assert.notNull("role", Role.ADMIN));
            mock.verify(() -> Assert.notNull("role", Role.ANONYMOUS));
        }
    }

    @Test
    void stream_shouldExposeStreamOfRoles() {
        Roles roles = new Roles(Set.of(Role.USER, Role.ADMIN));
        assertEquals(2, roles.stream().count());
        assertTrue(roles.stream().anyMatch(r -> r == Role.USER));
    }

    @Test
    void EMPTY_shouldBeInstanceOfEmptyRoles() {
        Roles empty = Roles.EMPTY;
        assertNotNull(empty);
        assertTrue(empty.get().isEmpty());
        assertFalse(empty.hasRole());
    }
}